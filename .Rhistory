shiny::runApp('firstApp')
runApp('firstApp')
runApp('firstApp')
runApp('firstApp')
head(faithful)
?faithful
runApp('firstApp')
runApp('firstApp')
runApp('firstApp')
runApp('firstApp')
library(shiny)
?sliderInput
runApp('interactiveApp')
?sliderInput
runApp('interactiveApp')
runApp('interactiveApp')
runApp('interactiveApp')
rand(1, 50)
?rand
rand(1)
randm(1)
randn(1)
rand(1,50)
?rand
?Random
library(stats)
rand(1)
?runif
randomPoints <- 100
xSliderMin
xSliderMin <- -50
xSliderMax <- 50
ySliderMin <- -50
ySliderMax <- 50
library(ggplot2)
runif(10, xSliderMin, xSliderMax)
plot(x_points, y_points)
x_points <- runif(10, xSliderMin, xSliderMax)
y_points <- runif(10, ySliderMin, ySliderMax)
plot(x_points, y_points)
plot(
x_points,
y_points,
xlim = c(-100,100)
)
?if
q
?ifelse
plot(
x_points,
y_points,
xlim = c(-100,100),
ylim = c(-100,100),
xlab = ifelse(xLabelCheck==1, 1, 0),
ylab = ifelse(yLabelCheck==1, 1, 0),
title = ifelse(titleCheck==1, 1, 0),
)
xLabelCheck <- 1
yLabelCheck <- 1
titleCheck <- 1
plot(
x_points,
y_points,
xlim = c(-100,100),
ylim = c(-100,100),
xlab = ifelse(xLabelCheck==1, 1, 0),
ylab = ifelse(yLabelCheck==1, 1, 0),
title = ifelse(titleCheck==1, 1, 0),
)
plot(
x_points,
y_points,
xlim = c(-100,100),
ylim = c(-100,100),
xlab = ifelse(xLabelCheck==1, "X-axis", NULL),
ylab = ifelse(yLabelCheck==1, "Y-axis", NULL),
title = ifelse(titleCheck==1, "Graph of Random POints", NULL),
)
?plot
plot(
x_points,
y_points,
xlim = c(-100,100),
ylim = c(-100,100),
xlab = ifelse(xLabelCheck==1, "X-axis", NULL),
ylab = ifelse(yLabelCheck==1, "Y-axis", NULL),
main = ifelse(titleCheck==1, "Graph of Random POints", NULL),
)
runApp('firstApp')
runApp('interactiveApp')
runApp('interactiveApp')
runApp('interactiveApp')
?plot
runApp('interactiveApp')
runApp('interactiveApp')
shiny::runApp('Developing_Data_Products/Shiny_Part_2/app1')
runApp('Developing_Data_Products/Shiny_Part_2/app2')
runApp('Developing_Data_Products/Shiny_Part_2/app1')
mtcars
names(mtcars)
runApp('Developing_Data_Products/Shiny_Part_2/app1')
?predict
?plot
runApp('shiny/linearModelApp')
lm
?lm
?predict.lm
model1 <- lm(hp ~ mpg, data = mtcars)
model1
mpgInput = 20
predict(model1, data.farme(mpg = mpgInput))
predict(model1, data.frame(mpg = mpgInput))
runApp('shiny/linearModelApp')
predHPmodel1 <- reactive({
predict(model1, data.frame(mpg = mpgInput))
})
predict(model1, data.frame(mpg = mpgInput))
predict(model1, data.frame(mpg = mpgInput))[1]
predHP <- predict(model1, data.frame(mpg = mpgInput))
predHP
str(predHP)
class(predHP)
runApp('shiny/linearModelApp')
plot(
x = mtcars$mpg,
y = mtcars$hp,
type = "p",
xlab = "Horsepower",
ylab = "Miles per Gallon"
)
renderText(
predHPmodel1
)
runApp('shiny/linearModelApp')
?reactive
names(mtcars)
runApp('shiny/linearModelApp')
runApp('shiny/linearModelApp')
runApp('shiny/linearModelApp')
names(mtcars)
head(mtcars)
model2 <- lm(hp ~ mpg + wt, data = mtcars)
runApp('shiny/linearModelApp')
mtcars$mpgsp
runApp('shiny/linearModelApp')
shiny::runApp('shiny/linearModelApp')
mtcars$mpgsp <- ifelse(mtcars$mpg - 20 > 0, mtcars$mpg - 20, 0)
View(mtcars)
runApp('Developing_Data_Products/Shiny_Part_2/app1')
?lines
runApp('Developing_Data_Products/Shiny_Part_2/app1')
mtcars$mpgsp <- ifelse(mtcars$mpg - 20 > 0, mtacrs$mpg$mpg - 20, 0)
model1 <- lm(hp ~ mpg, data = mtcars)
mtcars$mpgsp <- ifelse(mtcars$mpg - 20 > 0, mtcars$mpg$mpg - 20, 0)
model1 <- lm(hp ~ mpg, data = mtcars)
model2 <- lm(hp ~ mpg + mpgsp, data = mtcars)
predHPmodel1 <- reactive({
mpgInput <- input$sliderMPG
predict(model1, data.frame(mpg = mpgInput))
})
mpgInput <- input$sliderMPG
predict(model1, data.frame(mpg = mpgInput))
mpgInput <- input$sliderMPG
predict(
model2,
data.frame(
mpg = mpgInput,
wt = 100
)
)
plot(
x = mtcars$mpg,
y = mtcars$hp,
type = "p",
xlab = "Horsepower",
ylab = "Miles per Gallon"
)
runApp('Developing_Data_Products/Shiny_Part_2/app1')
?abline
model1
model1$intercept
str(model1)
model1$coefficients
model1$coefficients[1]
abline(
a = model1$coefficients[1],
b = model1$mpg,
col = "red"
)
plot(
x = mtcars$mpg,
y = mtcars$hp,
type = "p",
xlab = "Miles per Gallon",
ylab = "Horsepower"
)
abline(
a = model1$coefficients[1],
b = model1$mpg,
col = "red"
)
model1$coefficients[1]
abline(
a = model1$coefficients[1],
b = model1$mpg,
col = "red"
)
plot(
x = mtcars$mpg,
y = mtcars$hp,
type = "p",
xlab = "Miles per Gallon",
ylab = "Horsepower"
)
abline(
a = model1$coefficients[1],
b = model1$coefficients[2],
col = "red"
)
ifelese(1:35-20>0, 1:35-20, 0)
ifelse(1:35-20>0, 1:35-20, 0)
predict(
model2,
data.frame(
mpg = 1:35,
mpgsp = ifelse(1:35-20>0, 1:35-20, 0)
))
?lines
lines(
x = 1:35,
y = model2lines
)
model2lines <- predict(
model2,
data.frame(
mpg = 1:35,
mpgsp = ifelse(1:35-20>0, 1:35-20, 0)
))
lines(
x = 1:35,
y = model2lines
)
runApp('shiny/linearModelApp')
runApp('shiny/linearModelApp')
runApp('shiny/linearModelApp')
runApp('shiny/linearModelApp')
runApp('shiny/linearModelApp')
?points
predHPmodel1()
runApp('Developing_Data_Products/Shiny_Part_2/app1')
runApp()
runApp('Developing_Data_Products/Shiny_Part_2/app1')
runApp('shiny/linearModelApp')
runApp('shiny/linearModelApp')
?submitButton
runApp('shiny/linearModelApp')
?textInput
?mainPanel
runApp('shiny/tabUI')
runApp('shiny/tabUI')
?tabsetPanel
?tabPanel
runApp('shiny/tabUI')
?submitButton
runApp('shiny/tabUI')
runApp('shiny/tabUI')
runApp('shiny/tabUI')
runApp('shiny/tabUI')
runApp('shiny/tabUI')
runApp('shiny/tabUI')
shiny::runApp('Developing_Data_Products/Shiny_Part_2/app4')
runApp('Developing_Data_Products/Shiny_Part_2/app4')
?brushedPoints
shiny::runApp('Developing_Data_Products/Shiny_Part_2/app4')
runApp('Developing_Data_Products/Shiny_Part_2/app4')
?plotOutput
trees
?brushedPoints
names(trees)
runApp('shiny/brushTools')
runApp('shiny/brushTools')
runApp('shiny/brushTools')
runApp('shiny/brushTools')
runApp('shiny/brushTools')
runApp('shiny/brushTools')
```r
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
```
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
My First Gadget
myFirstGadget()
```r
library(shiny)
library(miniUI)
multiplyNumbers <- function(numbers1, numbers2) {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices=numbers1),
selectInput("num2", "Second Number", choices=numbers2)
)
)
```
## Gadgets with Arguments: Code Part 2
multiplyNumbers <- function(numbers1, numbers2) {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices=numbers1),
selectInput("num2", "Second Number", choices=numbers2)
)
)
server <- function(input, output, session) {
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget(ui, server)
}
multiplyNumbers()
multiplyNumbers(1:10, 1:10)
suppressPackageStartupMessages(library(googleVis))
library(googleVis)
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
myFirstGadget
myFirstGadget()
myFirstGadget()
multiplyNumbers <- function(numbers1, numbers2) {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices=numbers1),
selectInput("num2", "Second Number", choices=numbers2)
)
)
server <- function(input, output, session) {
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget(ui, server)
}
multiplyNumbers()
multiplyNumbers(1,2)
multiplyNumbers(1:10,2:10)
library(plotly)
install.packages("plotly")
library(plotly)
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter")
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter")
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter")
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter")
set.seed(2016-07-21)
temp <- rnorm(100, mean = 30, sd = 5)
pressue <- rnorm(100)
dtime <- 1:100
plot_ly(x = ~temp, y = ~pressue, z = ~dtime,
type = "scatter3d", color = ~temp)
data("airmiles")
plot_ly(x = ~time(airmiles), y = ~airmiles, type = "scatter", mode = "lines")
plot_ly(x = ~time(airmiles), y = ~airmiles, type = "scatter", mode = "lines")
data("airmiles")
plot_ly(x = ~time(airmiles), y = ~airmiles, type = "scatter", mode = "lines")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
plot_ly(x = ~precip, type = "histogram")
terrain1 <- matrix(rnorm(100*100), nrow = 100, ncol = 100)
plot_ly(z = ~terrain1, type = "heatmap")
terrain2 <- matrix(sort(rnorm(100*100)), nrow = 100, ncol = 100)
plot_ly(z = ~terrain2, type = "surface")
terrain2 <- matrix(sort(rnorm(100*100)), nrow = 100, ncol = 100)
plot_ly(z = ~terrain2, type = "surface")
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
# Create data frame
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
install.packages("leaflet")
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
my_map <- leaflet() %>%
addTitles("World Map")
addTiles("World Map")
my_map <- leaflet() %>%
addTiles("World Map")
my_map
my_map <- my_map %>%
addMarkers(lat=39.2980803, lng=-76.5898801,
popup="Jeff Leek's Office")
my_map
R.version
install.packages("installr")
library(installr)
updateR()
R.version
library(leaflet)
install.packages("leaflet")
library(leaflet)
my_map <- my_map %>%
addMarkers(lat=39.2980803, lng=-76.5898801,
popup="Jeff Leek's Office")
my_map <- leaflet() %>%
addTiles()
my_map
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
my_map
my_map
my_map <- my_map %>%
addMarkers(lat=39.2980803, lng=-76.5898801,
popup="Jeff Leek's Office")
my_map
